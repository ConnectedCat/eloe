package {	import com.adobe.images.PNGEncoder;	import flash.geom.*;	import flash.display.*;	import flash.events.*;//for event handling	import flash.net.Socket;//Sockets	import flash.utils.*;	import flash.text.*;	import flash.net.*;	import flash.system.*;	import com.adobe.serialization.json.*;//as3corelib JSON support	import fl.transitions.*;	import org.tuio.osc.OSCManager;	import org.tuio.ITuioListener;	import org.tuio.TuioBlob;	import org.tuio.TuioClient;	import org.tuio.TuioCursor;	import org.tuio.TuioObject;	import org.tuio.connectors.LCConnector;	public class Main extends MovieClip implements ITuioListener	{		/* Pencil Tool shape, everything drawn with this tool and the eraser tool is stored inside board.pencilDraw */		var pencilDraw:Shape = new Shape();		/* Colors */		var colorsBmd:BitmapData;//We'll use this Bitmap Data to get the pixel RGB Value when clicked		var pixelValue:uint;		var activeColor:uint = 0x000000;//This is the current color in use, displayed by the shapeSize MC		/* Save dialog instance */		var saveDialog:SaveDialog;		/* Active var, to check which tool is active */		var active:String;		/* Shape size color */		var ct:ColorTransform = new ColorTransform();		var colorInd:Shape = new Shape();				public var lines:Array;		private var thinkGearSocket:Socket;		public static const TILT_MODE:int = 4;		public static const SEND_DATA_SIZE:int = 6;		protected var client:TuioClient;		protected var connectionNameIn:String = "_OscDataStream";		protected var connectionNameOut:String = "_OscDataStreamOut";		protected var lcConnector:LCConnector;		protected var oscManager:OSCManager;		public function Main()		{			// constructor code			//TUIO connection			lcConnector = new LCConnector(connectionNameIn,connectionNameOut);			client = new TuioClient(lcConnector);			client.addListener(this);			oscManager = new OSCManager(null,lcConnector);			oscManager.start();			//end TUIO connection;						lines = new Array();			/* We create these functions later */			addListeners();			/* Hide tools highlights */			pencil.visible = false;			hideTools(eraser);		}//end constructor		public function addTuioCursor(tuioCursor : TuioCursor):void		{			switch (active)			{				case "Pencil" :					lines[tuioCursor.sessionID.toString()] = new Shape();//We add a new shape to draw always in top (in case of text, or eraser drawings)					board.addChild(lines[tuioCursor.sessionID.toString()]);					lines[tuioCursor.sessionID.toString()].graphics.moveTo(tuioCursor.x * stage.stageWidth, tuioCursor.y * stage.stageHeight);					//TweenMax.to(lines[tuioCursor.sessionID.toString()], .005, {x:tuioCursor.x * stage.stageWidth, y:tuioCursor.y * stage.stageHeight});					lines[tuioCursor.sessionID.toString()].graphics.lineStyle(8, 0x00FA14);					new Ring(tuioCursor.sessionID.toString(), this, tuioCursor.x * stage.stageWidth, tuioCursor.y * stage.stageHeight, 10);					break;				case "Eraser" :					lines[tuioCursor.sessionID.toString()] = new Shape();//We add a new shape to draw always in top (in case of text, or eraser drawings)					board.addChild(lines[tuioCursor.sessionID.toString()]);					lines[tuioCursor.sessionID.toString()].graphics.moveTo(tuioCursor.x * stage.stageWidth, tuioCursor.y * stage.stageHeight);					lines[tuioCursor.sessionID.toString()].graphics.lineStyle(20, 0xFFFFFF);					new Ring(tuioCursor.sessionID.toString(), this, tuioCursor.x * stage.stageWidth, tuioCursor.y * stage.stageHeight, 10);					break;				default :					break;			}		}		public function updateTuioCursor(tuioCursor : TuioCursor):void		{			try			{				var ring : Ring = getChildByName(tuioCursor.sessionID.toString()) as Ring;				ring.moveTo(tuioCursor.x * stage.stageWidth, tuioCursor.y * stage.stageHeight);				lines[tuioCursor.sessionID.toString()].graphics.lineTo(ring.x, ring.y);			}			catch (e:Error)			{			}		}		public function removeTuioCursor(tuioCursor : TuioCursor):void		{			try			{				var ring : Ring = getChildByName(tuioCursor.sessionID.toString()) as Ring;				ring.destroy();			}			catch(e : Error)			{			}		}		public function addTuioObject(tuioObject : TuioObject):void		{		}		public function updateTuioObject(tuioObject : TuioObject):void		{		}		public function removeTuioObject(tuioObject : TuioObject):void		{		}		public function addTuioBlob(tuioBlob : TuioBlob):void		{		}		public function updateTuioBlob(tuioBlob : TuioBlob):void		{		}		public function removeTuioBlob(tuioBlob : TuioBlob):void		{		}		public function newFrame(id : uint):void		{		}		private function PencilTool(e:MouseEvent):void		{			active = "Pencil";//Sets the active variable to "Pencil";			highlightTool(pencil);			hideTools(eraser);		}		private function EraserTool(e:MouseEvent):void		{			active = "Eraser";			highlightTool(eraser);			hideTools(pencil);		}		private function highlightTool(tool:DisplayObject):void		{			tool.visible = true;//Highlights tool in the parameter		}		private function hideTools(tool1:DisplayObject):void		{			tool1.visible = false;		}		private function addListeners():void		{			pencilTool.addEventListener(MouseEvent.MOUSE_UP, PencilTool);			eraserTool.addEventListener(MouseEvent.MOUSE_UP, EraserTool);			//saveButton.addEventListener(MouseEvent.MOUSE_UP, save);			//clearTool.addEventListener(MouseEvent.MOUSE_UP, clearBoard);		}	}//end class}//end package